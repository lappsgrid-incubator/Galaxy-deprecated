import static org.lappsgrid.discriminator.Discriminators.Uri

File annotations = new File(args[0])
File input = new File(args[1])
File output = new File(args[2])

DataContainer data = Serializer.parse(input.text, DataContainer)
if (data.discriminator == Uri.ERROR) {
    output.text = input.text
    return
}

def replacements = [["__gt__", ">"],
    ["__lt__", "<"],
    ["__sq__", "'"],
    ["__dq__", '"'],
    ["__ob__", "["],
    ["__cb__", "]"],
    ["__oc__", "{"],
    ["__cc__", "}"],
    ["__at__", "@"],
    ["__cn__", "\n"],
    ["__cr__", "\r"],
    ["__tc__", "\t"],
    ["__pd__", "#"]
]

replacements.each { pair ->
    annotations = annotations.replaceAll(pair[0], pair[1])
}

Container container = data.payload
String docid = container.metadata.docid
if (!docid) {
	output.text = new Data(Uri.LIF, "No id found in document.")
	return 
}

View view = container.newView()
view.addContains(Uri.NE, "discovery.ner_span_annotator2", "")
int id = 0
annotations.text.tokenize('\n').each { line ->
    def tuple = line.tokenize(',')*.trim()
    if (tuple.size < 4) {
		return new Data(Uri.ERROR, "Invalid dictionary format").asPrettyJson();
	}
    int start = tuple[0] as Integer
    int end = tuple[1] as Integer
    if (docid == tuple[3]) {
	    view.newAnnotation("id-${++id}", mapNE(tuple[2].trim()), start, end)
	}
}
output.text = new Data(Uri.LIF, container).asPrettyJson()
return

String mapNE(String type) {
    switch (type.toLowerCase()) {
	case "per":
	case "person":
	    return Uri.PERSON;
	case "loc":
	case "location":
	    return Uri.LOCATION;
	case "org":
	case "organization":
	    return Uri.ORGANIZATION;
	case "date":
	    return Uri.DATE;
    }
    return type;
}
